{
  "permissions": {
    "allow": [
      "Bash(tree:*)",
      "Bash(find:*)",
      "Bash(cat:*)",
      "Read(//c/Users/bogdan.dragos/Giteia/talos-manual/**)",
      "Bash(kubectl get:*)",
      "Bash(kubectl cluster-info:*)",
      "Bash(kubectl api-resources:*)",
      "Bash(curl:*)",
      "Bash(kubectl apply:*)",
      "Bash(kubectl wait:*)",
      "Bash(for file in )",
      "Bash(\"C:\\Users\\bogdan.dragos\\Giteia\\local-ai-packaged\\k8s\\apps\\flowise\\deployment.yaml\" )",
      "Bash(\"C:\\Users\\bogdan.dragos\\Giteia\\local-ai-packaged\\k8s\\apps\\neo4j\\statefulset.yaml\" )",
      "Bash(\"C:\\Users\\bogdan.dragos\\Giteia\\local-ai-packaged\\k8s\\apps\\postgres\\statefulset.yaml\" )",
      "Bash(\"C:\\Users\\bogdan.dragos\\Giteia\\local-ai-packaged\\k8s\\apps\\qdrant\\statefulset.yaml\" )",
      "Bash(\"C:\\Users\\bogdan.dragos\\Giteia\\local-ai-packaged\\k8s\\apps\\redis\\deployment.yaml\" )",
      "Bash(\"C:\\Users\\bogdan.dragos\\Giteia\\local-ai-packaged\\k8s\\apps\\searxng\\deployment.yaml\")",
      "Bash(do)",
      "Bash(if [ -f \"$file\" ])",
      "Bash(then)",
      "Bash(echo:*)",
      "Bash(fi)",
      "Bash(done)",
      "Bash($env:BW_SESSION=\"iNOPM7EEvjpdiIF5M8QK6Y9Rmnsn4ehnrv8u9kw8TTl0OcinVehFvjH1xSQ14/XwmbEy8UotzrCY1bV7hrMYwQ==\")",
      "Bash(export:*)",
      "Bash(kubeseal:*)",
      "Read(//c/**)",
      "Bash(kubectl describe:*)",
      "Bash(kubectl logs:*)",
      "Bash(wc -c echo \"\" kubectl get secret oauth2-proxy-secrets -n local-ai-system -o jsonpath='{.data.cookie-secret}')",
      "Bash(head -5 echo \"\" echo \"n8n Application:\" kubectl get deployments -n local-ai-n8n -o wide echo \"\" echo \"Flowise Application:\" kubectl get deployments -n local-ai-flowise -o wide echo \"\" echo \"SearXNG Application:\" kubectl get deployments -n local-ai-search -o wide echo \"\" echo \"Data Layer (StatefulSets):\" kubectl get statefulsets -n local-ai-data -o wide echo \"\" echo \"=== Overall Pod Status ===\" kubectl get pods -A --no-headers)",
      "Bash(grep local-ai echo \"\" echo \"=== All StatefulSets ===\" kubectl get statefulsets --all-namespaces)",
      "Bash(grep local-ai echo \"\" echo \"=== All Pods ===\" kubectl get pods --all-namespaces)",
      "Bash(__NEW_LINE__ echo \"\")",
      "Bash(kubectl delete:*)",
      "Bash(__NEW_LINE__ echo \"Waiting for new pod to start...\")",
      "Bash(kubectl exec:*)",
      "Bash(__NEW_LINE__ echo \"Waiting for new Redis pod to start...\")",
      "Bash(helm repo add:*)",
      "Bash(helm repo update:*)",
      "Bash(__NEW_LINE__ echo \"Step 2: Create longhorn-system namespace...\")",
      "Bash(kubectl create:*)",
      "Bash(__NEW_LINE__ echo \"Step 3: Installing Longhorn...\")",
      "Bash(helm install:*)",
      "Bash(kubectl label:*)",
      "Bash(helm upgrade:*)",
      "Bash(helm uninstall:*)",
      "Bash(pod-security.kubernetes.io/enforce=privileged )",
      "Bash(pod-security.kubernetes.io/audit=privileged )",
      "Bash(pod-security.kubernetes.io/warn=privileged )",
      "Bash(helm list:*)",
      "Bash(kubectl patch:*)",
      "Bash(awk:*)",
      "Bash(kubectl set image:*)",
      "Bash(helm search repo:*)",
      "Bash(kubectl rollout:*)",
      "Bash(helm status:*)",
      "Bash(helm get values:*)",
      "Bash(pkill:*)",
      "Bash(ssh:*)",
      "Bash(for ns in local-ai-system local-ai-data local-ai-flowise local-ai-n8n local-ai-search keycloak)",
      "Bash(do echo \"Namespace: $ns\")",
      "Bash(openssl rand:*)",
      "Bash(nslookup:*)",
      "Bash(openssl req:*)",
      "Bash(rm:*)",
      "Bash(openssl x509:*)",
      "Bash(printf:*)",
      "Bash(for ns in local-ai-n8n local-ai-flowise local-ai-data local-ai-search)",
      "Bash(do kubectl get ingress -n $ns -o json)",
      "Bash(kubectl annotate:*)",
      "Bash(for service in flowise neo4j searxng)",
      "Bash(for service in n8n flowise neo4j searxng)",
      "Bash(kubectl scale:*)",
      "Bash(xargs:*)",
      "Bash(for ns in local-ai-flowise local-ai-n8n local-ai-data local-ai-search local-ai-system)",
      "Bash(do echo \"$ns:\")",
      "Bash(git checkout:*)",
      "Bash(nginx.ingress.kubernetes.io/auth-url=\"http://oauth2-proxy.local-ai-system.svc.cluster.local:4180/oauth2/auth\" )",
      "Bash(nginx.ingress.kubernetes.io/auth-signin=\"https://keycloak.mylegion5pro.me/realms/homelab/protocol/openid-connect/auth?response_type=code&client_id=oauth2-proxy&redirect_uri=https://flowise.lupulup.com/oauth2/callback\" )",
      "Bash(nginx.ingress.kubernetes.io/auth-response-headers=\"x-auth-request-user, x-auth-request-email, x-auth-request-groups\" )",
      "Bash(nginx.ingress.kubernetes.io/auth-signin=\"https://keycloak.mylegion5pro.me/realms/homelab/protocol/openid-connect/auth?response_type=code&client_id=oauth2-proxy&redirect_uri=https://n8n.lupulup.com/oauth2/callback\" )",
      "Bash(nginx.ingress.kubernetes.io/auth-signin=\"https://keycloak.mylegion5pro.me/realms/homelab/protocol/openid-connect/auth?response_type=code&client_id=oauth2-proxy&redirect_uri=https://neo4j.lupulup.com/oauth2/callback\" )",
      "Bash(nginx.ingress.kubernetes.io/auth-signin=\"https://keycloak.mylegion5pro.me/realms/homelab/protocol/openid-connect/auth?response_type=code&client_id=oauth2-proxy&redirect_uri=https://searxng.lupulup.com/oauth2/callback\" )",
      "Bash(for service in n8n neo4j searxng)",
      "Bash(do echo \"Testing $service...\" curl -s -L -o /dev/null -w \"  HTTP Status: %{http_code}\\n  Redirect to: \" https://$service.lupulup.com 2)",
      "Bash(1 curl -v https://$service.lupulup.com)",
      "Bash(nginx.ingress.kubernetes.io/auth-url- )",
      "Bash(nginx.ingress.kubernetes.io/auth-signin- )",
      "Bash(nginx.ingress.kubernetes.io/auth-response-headers- )",
      "Bash(for ns in local-ai-n8n local-ai-flowise local-ai-data local-ai-search local-ai-system)",
      "Bash(do echo \"=== Namespace: $ns ===\" kubectl get pods -n $ns --no-headers)",
      "Bash(for service in flowise n8n neo4j searxng)",
      "Bash(git add:*)"
    ],
    "deny": [],
    "ask": []
  }
}
